[{"title":"798艺术区","date":"2017-06-04T07:30:49.000Z","path":"2017/06/04/798艺术区/","text":"抽象画 各种小陶瓷 猫咪，卡哇伊 brain red people 未名 孤独的小孩 恋人","categories":[{"name":"随笔","slug":"other","permalink":"https://guchunli.github.io/categories/other/"}],"tags":[{"name":"798","slug":"798","permalink":"https://guchunli.github.io/tags/798/"}]},{"title":"北京十渡","date":"2017-04-19T06:49:48.000Z","path":"2017/04/19/北京十渡/","text":"2017-04-17 北京十渡飞拉达、蹦极 今天真是玩嗨了 早上六点起床，准备好之后早早出了门，乘地铁赶往公主坟与大家集合。到了集合地，坐着租的面包车开始前往目的地————十渡。 十渡景区位于北京房山，到了景区之后，带队的队长确定参加飞拉达的人数开始买票。之前了解了一下飞拉达就是攀岩（岩壁探险或铁道式攀登），因为之前从来没参与过类似冒险运动，心里有点小紧张。因为人还比较多，所以一块请了一位教练。刚开始教练教授装备的穿戴，之后带领我们来到了攀岩的山脚下，教练说这座山大概有70多米，之后告诉了我们扣锁的使用，然后开始攀爬演示，小伙伴们也开始一个个紧随其后开始了攀爬之路。 飞拉达历经大约三个小时，穿越了ABCD区，终于到达了终点。教练帮我们把所有锁扣都挂到绳索上，下面是湖水，随着绳索划过去才算再次到达了地面。 之后和大家一起腐败吃午餐，吃午餐的餐厅对面正好就是蹦极的跳台，是不是看着一个个挑战者坠落、弹跳… 由于某些原因（吃的有点多了，惭愧…），本来打算不参加蹦极了，但是一想如果不参加，回去之后一定会捶胸顿足，后悔不跌，而且同性的小伙伴除了一对情侣之外都参加了，狠了狠心还是买了票。 来到蹦极门口，工作人员给每个人测量了身高和体重，并把数据写到了手背上。由于蹦极的人很多，等了大约有两三个小时，期间目睹一个一个从跳台自由落体，还有情侣相拥跳下，他们调侃这肯定是他们这辈子抱得最紧的一次了吧~~轮到我们的时候，不知怎么安排的被调到了最后一个，轮到我的时候，工作人员开始给我腿上绑绳，把眼镜粘到了胳膊上，为了避免女生走光把上衣和裤子的连接处也用胶带粘上了，说实话，自从买了票心有一直还挺紧张的，但真到了马上就要跳下去的时候，心里反而没有那么紧张了，还算比较平静。起跳之前冲着镜头挥挥手，然后只要张开双臂就可以了，看着50米下宽阔的湖水，心里还真是怂了，嗯，怂了（幸亏自己还是近视眼，并且还没戴眼镜）…接着工作人员扶着胳膊向前推去，从未有过的自由落体的失重感觉瞬间侵占了大脑，一片空白，只得紧闭双眼，只感觉到达最低点之后又弹跳到了下降高度的三分之二，然后又开始降落，才敢睁开眼睛环顾四周，之后又弹了大概两三次，高度就不是很高了，才开始享受蹦极的乐趣，然后就被放了下来，湖面上又专业人员把我接了下去，整个过程也就是一两分钟的样子，算是真切的感受了一次蹦极的刺激！ 今天认识了一个很说的来的朋友，我俩基本上叽叽喳喳聊了一天，感觉很是投缘，遇到很聊得来的人总是感觉心情很舒畅！也认识了一个四川的男生，还在上大学，曾经自己骑行去过云南，还认识了一个广州的女孩（就是下图中的女孩），刚辞了工作专门出来游玩的，很佩服这种勇气！ 最后用鹿晗的《某时某刻 Catch me when I fall》结个尾~~~","categories":[{"name":"随笔","slug":"other","permalink":"https://guchunli.github.io/categories/other/"}],"tags":[{"name":"十渡","slug":"十渡","permalink":"https://guchunli.github.io/tags/十渡/"},{"name":"蹦极","slug":"蹦极","permalink":"https://guchunli.github.io/tags/蹦极/"}]},{"title":"2017玉渊潭樱花节","date":"2017-04-18T11:54:47.000Z","path":"2017/04/18/2017玉渊潭樱花节/","text":"2017-04-18 玉渊潭樱花节 去年就打算去玉渊潭看花的忘了是什么原因错过了花期，没能去成心里总觉得遗憾今年决定不能再错过一定要去看看的虽然今天天气不太好，但是花开尤盛，自以为很是不错也算是了了一个小小心愿 最重要的是去了，并且看到了不是么~~","categories":[{"name":"随笔","slug":"other","permalink":"https://guchunli.github.io/categories/other/"}],"tags":[{"name":"玉渊潭","slug":"玉渊潭","permalink":"https://guchunli.github.io/tags/玉渊潭/"},{"name":"樱花节","slug":"樱花节","permalink":"https://guchunli.github.io/tags/樱花节/"}]},{"title":"mac显示隐藏文件","date":"2017-03-21T10:37:39.000Z","path":"2017/03/21/mac显示隐藏文件/","text":"1.显示隐藏文件1defaults write com.apple.finder AppleShowAllFiles Yes &amp;&amp; killall Finder 2.不显示隐藏文件1defaults write com.apple.finder AppleShowAllFiles No &amp;&amp; killall Finder 3.删除文件夹下的所有 .git 文件1find . -name &quot;.git&quot; | xargs rm -Rf","categories":[{"name":"笔记","slug":"note","permalink":"https://guchunli.github.io/categories/note/"}],"tags":[{"name":"技巧","slug":"技巧","permalink":"https://guchunli.github.io/tags/技巧/"},{"name":"隐藏文件","slug":"隐藏文件","permalink":"https://guchunli.github.io/tags/隐藏文件/"}]},{"title":"Apple Pay学习","date":"2017-03-15T08:37:17.000Z","path":"2017/03/15/Apple-Pay学习/","text":"概述1.支付方式：Touch ID/ Passcode2.设备要求：iPhone6以上（iphone:线上/线下 ipad:线上 watch:线下）3.系统要求：iOS8.0以上，银联（中国）：9.2 4.基于NFC5.2014年10月20日在美国正式上线，2016年2月18日凌晨5：00， Apple Pay 业务在中国上线。6.与微信支付以及支付宝等第三方支付平台的区别： 硬件方面 Apple Pay：必须是iOS设备， 而且是按照线上支付和线下支付区分不同的真机设备（具体参考表1） 微信、支付宝： 基本跟硬件设备无关， 支持大多数的只能手机 网络环境要求 Apple Pay：线上支付需要联网， 线下支付无需联网就可以支付 微信、支付宝： 无论是线上还是线下支付， 都需要联网使用 使用技术 Apple Pay：线下支付使用的是 基于NFC的近场通讯技术 微信、支付宝： 线下支付使用的是 扫码支付（条形码、二维码） 主要功能 Apple Pay：线上支付、线下支付、部分升级后的ATM机可以取款 微信、支付宝： 线上支付、线下支付、转账、理财等 安全性能 Apple Pay：不保留银行卡信息，并且不会暴漏给外界、不分流银行存款（不需要从银行卡转钱到另外一个平台）、不能充值 安全性较高 微信、支付宝： 密码保护，身份验证等手段保护账户 安全性相对稍差 支付时长 Apple Pay：无论是线上支付，还是线下支付， 只需要验证指纹即可支付。非常迅速 微信、支付宝： 需要扫码支付， 流程相对繁琐，所以时长较长 各自弊端 Apple Pay：只适用于苹果设备， 支付场景单一，无转账理财等业务 微信、支付宝： 安全性较差， 必须联网操作，需要充值到对应平台 注册并配置一个商业标示符1.添加一个App ID2.配置Merchant ID3.为Merchant ID 配置证书, 并下载证书安装到钥匙串4.检查安装到钥匙串中的证书是否有效5.绑定Merchant ID 到 APP ID 证书失效，请到以下地址下载重新安装：https://www.apple.com/certificateauthority/ 代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239//一.判断当前设备是否支持支付if (![PKPaymentAuthorizationViewController canMakePayments]) &#123;NSLog(@&quot;该设备不支持ApplePay&quot;);return;//二.判断Wallet有没有添加该支付网络的储蓄卡/信用卡&#125;else if ([PKPaymentAuthorizationViewController canMakePaymentsUsingNetworks:@[PKPaymentNetworkChinaUnionPay,PKPaymentNetworkVisa]])&#123;NSLog(@&quot;Wallet没有添加该支付网络的储蓄卡/信用卡&quot;);//创建一个添加卡的按钮PKPaymentButton *btn = [PKPaymentButton buttonWithType:PKPaymentButtonTypeSetUp style:PKPaymentButtonStyleBlack];[btn addTarget:self action:@selector(jumpToSetup) forControlEvents:UIControlEventTouchUpInside];[self.payView addSubview:btn]; &#125;else&#123;//创建一个支付按钮PKPaymentButton *btn = [PKPaymentButton buttonWithType:PKPaymentButtonTypeBuy style:PKPaymentButtonStyleWhiteOutline];[btn addTarget:self action:@selector(jumpToPay) forControlEvents:UIControlEventTouchUpInside];[self.payView addSubview:btn];&#125;- (void)jumpToSetup&#123;NSLog(@&quot;跳转到添加银行卡页面&quot;);PKPassLibrary * pk = [[PKPassLibrary alloc]init];[pk openPaymentSetup];&#125;- (void)jumpToPay&#123;//三.创建支付请求并配置各项信息//1.创建支付请求PKPaymentRequest *request = [[PKPaymentRequest alloc]init];//2.配置参数//2.1 商店标识request.merchantIdentifier = @&quot;&quot;;//2.2 国家代码request.countryCode = @&quot;CN&quot;;//2.3 货币代码request.currencyCode = @&quot;CNY&quot;;//2.4 支持的支付网络request.supportedNetworks = @[PKPaymentNetworkChinaUnionPay,PKPaymentNetworkVisa];//2.5 支付请求包含一个支付摘要项目的列表NSDecimalNumber *price1 = [NSDecimalNumber decimalNumberWithString:@&quot;10.0&quot;];PKPaymentSummaryItem *item1 = [PKPaymentSummaryItem summaryItemWithLabel:@&quot;iPhone&quot; amount:price1];NSDecimalNumber *price2 = [NSDecimalNumber decimalNumberWithString:@&quot;20.0&quot;];PKPaymentSummaryItem *item2 = [PKPaymentSummaryItem summaryItemWithLabel:@&quot;iPad&quot; amount:price2 type:PKPaymentSummaryItemTypePending];NSDecimalNumber *totalPrice = [NSDecimalNumber zero];totalPrice = [totalPrice decimalNumberByAdding:price1];totalPrice = [totalPrice decimalNumberByAdding:price2];PKPaymentSummaryItem *total = [PKPaymentSummaryItem summaryItemWithLabel:@&quot;财务中心&quot; amount:totalPrice type:PKPaymentSummaryItemTypePending];//注意：数组最后一个是总价格request.paymentSummaryItems = @[item1,item2,total];//2.6运输方式NSDecimalNumber *shippingPrice = [NSDecimalNumber decimalNumberWithString:@&quot;18.0&quot;];PKShippingMethod *method = [PKShippingMethod summaryItemWithLabel:@&quot;顺风快递&quot; amount:shippingPrice];method.identifier = @&quot;shunfeng&quot;;method.detail = @&quot;24小时内送到&quot;;request.shippingMethods = @[method];request.shippingType = PKShippingTypeServicePickup;//2.7通过指定merchantCapabilities属性来指定你支持的支付处理标准，3DS支付方式是必须支持的，EMV方式是可选的request.merchantCapabilities = PKMerchantCapability3DS | PKMerchantCapabilityEMV | PKMerchantCapabilityCredit | PKMerchantCapabilityDebit;//2.8需要的配送信息和账单信息request.requiredBillingAddressFields = PKAddressFieldAll;request.requiredShippingAddressFields = PKAddressFieldAll;//2.9 存储额外信息request.applicationData = [@&quot;购物车ID：123456&quot; dataUsingEncoding:NSUTF8StringEncoding];//四.弹出授权控制器，让用户给支付授权//开始支付PKPaymentAuthorizationViewController *pkCtrl = [[PKPaymentAuthorizationViewController alloc]initWithPaymentRequest:request];if (pkCtrl == nil) &#123;NSLog(@&quot;授权控制器创建失败&quot;);return;&#125;pkCtrl.delegate = self;[self presentViewController:pkCtrl animated:YES completion:nil];&#125;#pragma mark - PKPaymentAuthorizationViewControllerDelegate//五.处理支付凭证//授权成功- (void)paymentAuthorizationViewController:(PKPaymentAuthorizationViewController *)controllerdidAuthorizePayment:(PKPayment *)paymentcompletion:(void (^)(PKPaymentAuthorizationStatus status))completion&#123;/*服务器接收到token后的一般处理流程:1.验证支付数据的哈希表和签名2.为加密过的支付数据解码3.向支付处理系统提交支付数据4.向订单追踪系统提交订单*/NSLog(@&quot;验证授权---%@&quot;,payment.token);/*处理支付请求时，你有两个选择:1.你既可以利用支付平台处理支付请求，2.也可以自己实现支付请求处理流程。一个常用的支付平台可以完成上述大部分操作。*/NSLog(@&quot;验证通过后，需要开发中继续完成交易&quot;);BOOL isSuccess = YES;if (isSuccess) &#123;completion(PKPaymentAuthorizationStatusSuccess);&#125;else&#123;completion(PKPaymentAuthorizationStatusFailure);&#125;&#125;//六.关闭授权控制器//授权成功或者取消授权之后会调用此方法- (void)paymentAuthorizationViewControllerDidFinish:(PKPaymentAuthorizationViewController *)controller&#123;NSLog(@&quot;取消或者交易完成&quot;);[self dismissViewControllerAnimated:YES completion:nil];&#125; 参考原文：Apple Pay–iOS开发","categories":[{"name":"笔记","slug":"note","permalink":"https://guchunli.github.io/categories/note/"}],"tags":[{"name":"Apple Pay","slug":"Apple-Pay","permalink":"https://guchunli.github.io/tags/Apple-Pay/"}]},{"title":"将.c文件打包成库文件","date":"2017-03-06T10:43:09.000Z","path":"2017/03/06/将-c文件打包成库文件/","text":"打包.a1.Cocoa Touch Static Library2.添加要打包的文件:.c，.h3.将头文件添加到Build Phases -&gt; Copy Files中去4.需要修改Build Settings中的 Build Active Architecture Only 以满足运行不同CPU环境的模拟器。 将此设置为NO。 选择Edit Scheme–&gt; Buid Configuration设置为release5.分别选择模拟器和真机编译，生成.a文件，在不同编译环境下编译会生成四种静态库，debug模拟器，debug真机，release模拟器，release真机6.查看静态库所支持的CPU环境：lipo -info 静态库文件7.合并静态库：lipo -create 静态库1 静态库2 -output 新静态库名称.a 注意：1.如果直接拖拽的是一个项目，并将项目当做一个静态库引用需要这样处理：在 Build Phases 中的 Target Dependencies 和 Link Binary With Libraries 中分别添加项目。如果仅仅是一个静态库的话，那么Link Binary WithLibraries 是必须添加的。2.如果编译的静态库中有分类的话必须在 Build Settings –&gt; Other Linker Flags 中加 -Objc 如果还崩溃，还得加上 -all_load 打包.so1.编译1gcc -c -fPIC -o myfile.o myfile.c 2.生成.so文件1gcc -shared -o libname.so myfile.o","categories":[{"name":"笔记","slug":"note","permalink":"https://guchunli.github.io/categories/note/"}],"tags":[{"name":".c","slug":"c","permalink":"https://guchunli.github.io/tags/c/"},{"name":".a","slug":"a","permalink":"https://guchunli.github.io/tags/a/"},{"name":".so","slug":"so","permalink":"https://guchunli.github.io/tags/so/"}]},{"title":"github上使用SSH和gitignore","date":"2017-03-03T08:52:02.000Z","path":"2017/03/03/github上使用SSH和gitignore/","text":"1.使用SSH123456$ cd ~/.ssh$ ssh-keygen -t rsa -C &quot;your email address&quot;$ cat ~/.ssh/id_rsa.pub$ ssh -T git@github.com （github） $ ssh -T git@git.oschina.net (oschina)$ Welcome to Git@OSC, nickname! 2.gitignore 123456cd /Users/apple/Desktop/codegit clone git地址cp gitignore路径 .gitignoregit add .git commit -m &quot;添加 gitignore&quot;git push 注意：”cp gitignore路径 .gitignore”一定要加”.gitignore”。","categories":[{"name":"笔记","slug":"note","permalink":"https://guchunli.github.io/categories/note/"}],"tags":[{"name":"github","slug":"github","permalink":"https://guchunli.github.io/tags/github/"},{"name":"SSH","slug":"SSH","permalink":"https://guchunli.github.io/tags/SSH/"},{"name":"gitignore","slug":"gitignore","permalink":"https://guchunli.github.io/tags/gitignore/"}]},{"title":"git使用","date":"2017-03-03T02:49:42.000Z","path":"2017/03/03/git使用/","text":"初始化仓库 $ git init 提交代码 $ git add .$ git commit -m “” 查看状态$ git status 查看修改 $ git diff12-change something+change 查看提交历史 $ git log 1234567891011121314151617commit acbcfcfa48c89deb725aae9e03a68a2f5abaa1d4Author: gcl &lt;155@163.com&gt;Date: Tue Feb 7 14:30:11 2017 +0800change 2commit 99f733644454644d90b8ee39c6737dc283c78cecAuthor: gcl &lt;155@163.com&gt;Date: Tue Feb 7 14:27:55 2017 +0800change readme.txtcommit 58110376e350d36c8df095b17ff2ecb44906eae2Author: gcl &lt;155@163.com&gt;Date: Tue Feb 7 14:25:17 2017 +0800add readme.txt 简化版本信息 $ git log –pretty=oneline123acbcfcfa48c89deb725aae9e03a68a2f5abaa1d4 change 299f733644454644d90b8ee39c6737dc283c78cec change readme.txt58110376e350d36c8df095b17ff2ecb44906eae2 add readme.txt 查看命令历史 $ git reflog12345acbcfcf HEAD@&#123;0&#125;: reset: moving to acbcfcfa499f7336 HEAD@&#123;1&#125;: reset: moving to HEAD^acbcfcf HEAD@&#123;2&#125;: commit: change 299f7336 HEAD@&#123;3&#125;: commit: change readme.txt5811037 HEAD@&#123;4&#125;: commit (initial): add readme.txt 回退版本HEAD指向当前版本，HEAD^是上一版本，HEAD^^是上上版本，HEAD~100是上100个版本--hard是强制抹除修改，未提交的修改会丢失。git reset –hard 慎重使用--mixed是保存修改，相当于重新提交。 回到上一版本 $ git reset –hard HEAD^ 回到某一历史 $ git reset –hard commitid 工作区与暂存区 respository文件夹：工作区 .git：版本库，包含了stage（暂存区），分支master，指针HEAD git add是把文件修改放到了暂存区，git commit把暂存区的内容提交到了分支，没有提交到暂存区的修改是不会被提交到分支的提交的事件线：工作区-&gt;git add-&gt;暂存区-&gt;git commit-&gt;分支 撤销修改git管理的是修改，而不是文件 清空工作区的修改，回到最近一次git commit或git add时的状态（用版本库的版本替换工作区的版本）：git checkout – readme.txt （注意：git checkout 是切换分支命令） 撤销add后，commit前在暂存区的修改，将暂存区的修改放回工作区：git reset HEAD readme.txt（注意：reset可以回退版本，还可以撤销add到暂存区的内容，回退到工作区，如果要撤销在工作区的修改，可以再次checkout – file） 撤销commit之后，push之前：版本回退，git reset git push：无法撤销 删除文件确定删除 git rm filenamegit commit 撤销删除，找回文件 git checkout – filename注意：git checkout是使用版本库中的最新版本替换工作区的版本，即撤销git add/rm之前的修改 远程仓库 本地库master与远程库origin关联，origin为远程库的默认叫法 $ git remote add origin git@github.com:XXX/learngit.git（XXX为你的github账户名） 将本地库中的所有内容推送到远程库中，加上-u将本地master分支和远程origin分支关联起来，以后推送就可以直接使用git push简化命令 $ git push -u origin master 以后推送使用以下命令 $ git push origin master 把远程库克隆到本地,使用https速度慢，而且每次都要输入口令 $ git clone ssh或https push与pull push：本地 –&gt; 远程，如果本地超前远程，需要push pull：本地 &lt;– 远程，如果本地落后远程，需要pull 分支管理HEAD指向当前分支--master分支，master指向最新提交 创建分支 创建分支将当前分支中的所有文件拷贝到新分支 $ git branch second 切换到分支 $ git checkout second 创建+切换到分支 $ git checkout -b second 查看当前分支 $ git branch 合并分支 合并指定分支到当前分支(主分支) $ git branch master$ git merge second 撤销合并操作 $ git reset 合并模式 ”fast forward”模式：合并分支默认使用”fast forward”模式，删除分支会丢掉分支信息，合并后看不出做过合并 普通模式：禁用”fast forward” 使用普通模式，合并后的历史可以看出曾经做过合并，在merge时生成一个新的commit。禁用”fast forward”并且加上了commit描述： $ git merge –no-ff -m “merge with no-ff” second 查看分支 $ git log 查看分支合并图$ git log –graph$ git log –graph –pretty=oneline –abbrev-commit 删除分支 $ git branch -d second$ git branch -D second：强行删除一个没有合并过的分支$ git push origin –delete second 删除远程分支 分支管理策略本地分支：master，dev，bug，feature远程分支：origin，dev 解决冲突 查看冲突 $ git status 查看分支合并图 git log –graph $ git log –graph –pretty=oneline –abbrev-commit 解决冲突合并分支发生冲突后，解决冲突步骤：查看冲突-&gt;修改-&gt;提交-&gt;合并完成 bug分支将当前无法提交到现场先保存起来，使工作区恢复clean状态，修复bug后，再将保存的东西解开 将工作现场先保存起来：git stash 查看保存现场记录：git stash list 恢复工作线程 git stash apply ：stash内容不删除，需要使用git stash drop手动删除 git stash pop：恢复的同时将stash的内容删除 git stash apply stash@{0}：有多个stah时，指定恢复到某个stash feature分支新添加功能时创建feature分支，开发完成合并到主分支，最好在开发新功能时为每一个新功能创建一个分支 多人协作查看远程库 查看远程库的信息 $ git remote 查看远程分支详细信息 $ git remote -v 推送分支将本地某个分支中的所有提交推送到远程库 $ git push origin master一般只推送master和dev分支，其他可以在本地放着 抓取分支创建本地dev分支： $ git checkout -b dev origin/dev git pull提示“no tracking information”,设置dev和origin/dev的链接：$ git branch –set-upstream dev origin/dev$ git pull$ git add/commit/push 注意：如果git pull时提示“no tracking information”，则需要指定本地master/dev分支与远程origin/dev分支的链接后，才能pull $ git branch –set-upstream dev origin/dev 已弃用$ git branch –set-upstream-to=origin/dev dev 最新用法 多⼈人协作的⼯工作模式:（1）git push origin branch-name（2）如果推送失败,则因为远程分⽀支⽐比你的本地更新,需要先⽤用git pull试图合并;（3）如果合并有冲突,则解决冲突,并在本地提交;（4）没有冲突或者解决掉冲突后,再⽤用git push origin branch-name推送就能成功! 标签添加标签 添加标签 $ git tag v1.0 补加标签 $ git log –pretty=oneline –abbrev-commit$ git tag v0.9 commitid 添加说明用-a指定标签名，-m指定说明文字： $ git tag -a v0.1 -m “version 0.1 released” 3628164 私钥签名标签 $ git tag -s v0.2 -m “signed version 0.2 released” fec145a 查看标签 查看所有标签 $ git tag 查看标签信息 $ git show v0.9注意，标签不是按时间顺序列出，而是按字母排序的。 推送标签 推送某一标签 $ git push origin v1.0 推送本地所有未推送标签 $ git push origin –tags 删除标签 删除本地标签 $ git tag -d v1.0 删除远程标签 需要先删除本地标签： $ git tag -d v1.0 推送到远程： $ git push origin :refs/tags/v1.0 github使用SSH123456789$ ssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com&quot;# Creates a new ssh key using the provided email# Generating public/private rsa key pair...$ cat ~/.ssh/id_rsa.pub# ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc.... 将public key添加$ ssh -T git@github.com （github）ssh -T git@git.oschina.net (oschina)Welcome to Git@OSC, yourname! 为开源仓库贡献代码fork在GitHub上，可以任意Fork开源仓库 提交修改自己拥有Fork后的仓库的读写权限，从自己帐号克隆仓库，然后提交到自己的仓库 pull request请求官方接受修改 自定义git配置用户名和email如果遇到以下问题：1234567891011*** Please tell me who you are.Rungit config --global user.email &quot;you@example.com&quot;git config --global user.name &quot;Your Name&quot;to set your account&apos;s default identity.Omit --global to set the identity only in this repository.&gt;&gt;&gt;fatal: unable to auto-detect email address (got &apos;xxx@xxx.(none)&apos;) 需要配置用户名和邮箱： $ git config –global user.name “Your Name”$ git config –global user.email “email@example.com” 给git命令添加颜色 $ git config –global color.ui true 忽略特殊文件 忽略文件的原则 忽略操作系统自动生成的文件，比如缩略图等； 忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件； 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。 强制添加被忽略的文件 $ git add -f App.class 查看想添加的文件被.gitignore中的哪条规则忽略了 $ git check-ignore -v App.class 注意：.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理 配置别名 $ git config –global alias.st status$ git config –global alias.co checkout$ git config –global alias.ci commit$ git config –global alias.br branch$ git config –global alias.unstage ‘reset HEAD’$ git config –global alias.last ‘log -1’$ git config –global alias.lg “log –color –graph – 注意：--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用 配置文件每个仓库的Git配置文件都放在.git/config文件中，查看配置文件 $ cat .git/config 要删除别名，直接把对应的行删掉即可改错了，可以删掉文件重新通过命令配置 自己搭建git服务器（1）安装gitsudo apt-get install git（2）创建一个git用户，用来运行git服务sudo adduser git（3）创建证书登录收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个（4）初始化Git仓库sudo chown -R git:git sample.git（5）禁用shell登录出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：git:x:1001:1001:,,,:/home/git:/bin/bash改为： git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。（6）克隆远程仓库git clone git@server:/srv/sample.git（7）要方便管理公钥，用Gitosis； 要像SVN那样变态地控制权限，用Gitolite。 git命令汇总git init git addgit commitgit rmgit status git diffgit log (–pretty=oneling)git reflog git checkout – filenamegit reset HEAD filenamegit reset –hard HEAD^(commitid) git add remote origin git/httpsgit push/pull/clone git branch secondgit checkout secondgit checkout -b secondgit branchgit branch -d secondgit log –graph –pretty=oneline –abbrev-commit git stashgit stash listgit stash applygit stash dropgit stash popgit stash apply stash@{0} git remote -vgit checkout -b dev origin/devgit branch –set-upstream-to=origin/dev devgit pull git tag namegit tag tagname commitidgit tag -a tagname -m “description”git taggit show tagnamegit push origin tagnamegit push origin –tagsgit tag -d tagnamegit push origin :refs/tags/tagname ssh-keygen -t rsa -C “xxxxx@xxxxx.com”cat ~/.ssh/id_rsa.pubssh -T git@github.com （github） git add -f App.class git config user.name “username”git config user.email “email”git config –global alias.st status 附Unix命令（1）创建文件夹：mkdir（2）跳到指定路径：cd（3）查看当前完整路径：pwd（4）查看当前路径下的所有文件及文件夹：ls（5）cat：可以显示文件内容，但是不能编辑（6）touch：如果文件存在，使用touch指令可更改这个文件或目录的日期时间，包括存取时间和更改时间；如果文件不存在，touch指令会在当前目录下新建一个空白文件（7）vi/vim：打开文件后可以编辑（8）echo：输出 Git的官方网站 本文为阅读廖雪峰的官方网站中的git教程的学习笔记，仅为自己的一点学习记录，原文写的非常好，作者很厉害，有兴趣的朋友可以阅读原文：廖雪峰的官方网站的git教程","categories":[{"name":"笔记","slug":"note","permalink":"https://guchunli.github.io/categories/note/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://guchunli.github.io/tags/Git/"}]},{"title":"Markdown的使用","date":"2017-02-19T01:48:39.000Z","path":"2017/02/19/Markdown的使用/","text":"基本语法1.换行符： 一行结束时输入两个空格 line1line2 2.段落： 段落之间空一行 p1 p2p3 3.标题： （1）Setext形式：= 大标题 - 中标题 （2）atx形式：# 大标题中标题 一级标题二级标题三级标题四级标题五级标题六级标题 4.区块引用：> 区块1 区块2 区块3 5.列表：*/+/- 前后加空格，tab键或四个空格可分级 列表1 列表2 列表3 6.斜体、粗体、删除线斜体：*斜体* 斜体粗体：**斜体** 粗体粗斜体：***斜体*** 粗斜体删除线：~~删除线~~ 删除线 7.内嵌代码：` 内嵌代码 ` 内嵌代码8.水平线：—— 9.链接： [文字]（url title） ![]（图片 title） 百度一下-你就知道 10.注意：反斜杠\\实现转义效果","categories":[{"name":"笔记","slug":"note","permalink":"https://guchunli.github.io/categories/note/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"https://guchunli.github.io/tags/markdown/"}]},{"title":"hexo创建个人博客","date":"2017-02-18T08:43:01.000Z","path":"2017/02/18/hexo创建个人博客/","text":"常见命令1.安装hexo1$ sudo npm install -g hexo 2.初始化1$ hexo init 3.生成静态页面1$ hexo generate（hexo g也可以） 4.启动本地服务，进行文章预览调试,浏览器输入http://localhost:4000即可1$ hexo server（hexo s也可以） 5.发布配置1$ hexo deploy（hexo d也可以） 每次部署的步骤，可按以下三步来进行: hexo clean，hexo generate，hexo deploy，或者 hexo d -g 6.新建文章1$ hexo new&quot;postName&quot; 7.新建页面1$ hexo new page&quot;pageName&quot; 问题：ERROR Deployer not found: git解决：npm install hexo-deployer-git –save重新 deploy 即可","categories":[{"name":"笔记","slug":"note","permalink":"https://guchunli.github.io/categories/note/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://guchunli.github.io/tags/hexo/"},{"name":"个人博客","slug":"个人博客","permalink":"https://guchunli.github.io/tags/个人博客/"}]}]